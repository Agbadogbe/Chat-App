<!doctype html>
<html lang="fr">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Jeu des Billes — Étape 1</title>
    <link rel="stylesheet" href="styles.css" />
  </head>
  <body>
    <main class="container">
      <header class="app-header">
        <h1>Jeu des Billes <span class="badge">Étape&nbsp;1</span></h1>
        <p class="subtitle">Inscris les deux joueurs (prénom + nom).</p>
      </header>

      <section id="step1" class="card">
        <h2>Étape 1 — Inscription des joueurs</h2>

        <form id="players-form" novalidate>
          <div class="players-grid">
            <fieldset>
              <legend>Joueur 1</legend>
              <label for="p1-first">Prénom</label>
              <input id="p1-first" name="p1-first" type="text" required placeholder="Ex. Aïcha" />
              
              <label for="p1-last">Nom</label>
              <input id="p1-last" name="p1-last" type="text" required placeholder="Ex. Diop" />
            </fieldset>

            <fieldset>
              <legend>Joueur 2</legend>
              <label for="p2-first">Prénom</label>
              <input id="p2-first" name="p2-first" type="text" required placeholder="Ex. Karim" />
              
              <label for="p2-last">Nom</label>
              <input id="p2-last" name="p2-last" type="text" required placeholder="Ex. Benali" />
            </fieldset>
          </div>

          <div id="form-errors" class="errors"></div>

          <div class="actions">
            <button type="submit" id="submit-btn" class="primary">Valider les joueurs</button>
            <button type="button" id="reset-btn" class="ghost" hidden>Modifier</button>
          </div>
        </form>

        <div id="preview" class="preview">
          <div class="avatar" id="avatar1">?</div>
          <div class="names">
            <div class="line"><strong id="name1">Joueur 1</strong></div>
            <div class="line small muted">vs</div>
            <div class="line"><strong id="name2">Joueur 2</strong></div>
          </div>
          <div class="avatar" id="avatar2">?</div>
        </div>

        <div id="step1-success" class="success card" hidden>
          <p>✅ Joueurs enregistrés ! <strong id="sum1"></strong> affronte <strong id="sum2"></strong>.</p>
        </div>
      </section>
    </main>

    <script src="app.js" defer></script>
  </body>
</html>


body {
  margin: 0;
  font-family: Arial, sans-serif;
  background: #0e0f12;
  color: #fff;
  display: flex;
  justify-content: center;
  padding: 20px;
}

.container {
  width: min(800px, 100%);
}

.card {
  background: #1e2026;
  padding: 20px;
  border-radius: 12px;
  margin-top: 20px;
}

.players-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 16px;
}

fieldset {
  border: 1px solid #444;
  border-radius: 10px;
  padding: 12px;
}

label {
  display: block;
  margin-top: 8px;
}

input {
  width: 100%;
  padding: 8px;
  border-radius: 6px;
  border: none;
  margin-bottom: 6px;
}

.actions {
  margin-top: 12px;
}

button {
  padding: 10px 14px;
  border: none;
  border-radius: 8px;
  cursor: pointer;
}

button.primary {
  background: #6ae3ff;
  color: #000;
  font-weight: bold;
}

button.ghost {
  background: transparent;
  border: 1px solid #6ae3ff;
  color: #6ae3ff;
}

.errors {
  color: #ff6b6b;
  margin-top: 8px;
}

.preview {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-top: 16px;
  padding: 12px;
  border: 1px dashed #555;
  border-radius: 8px;
}

.avatar {
  width: 50px;
  height: 50px;
  border-radius: 50%;
  background: #6ae3ff;
  color: #000;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: bold;
}

.names {
  text-align: center;
}

// État global
const state = {
  players: [
    { first: "", last: "" },
    { first: "", last: "" }
  ]
};

document.addEventListener("DOMContentLoaded", () => {
  const form = document.getElementById("players-form");
  const inputs = {
    p1First: document.getElementById("p1-first"),
    p1Last: document.getElementById("p1-last"),
    p2First: document.getElementById("p2-first"),
    p2Last: document.getElementById("p2-last"),
  };
  const errors = document.getElementById("form-errors");
  const resetBtn = document.getElementById("reset-btn");
  const submitBtn = document.getElementById("submit-btn");
  const successBox = document.getElementById("step1-success");
  const sum1 = document.getElementById("sum1");
  const sum2 = document.getElementById("sum2");
  const name1 = document.getElementById("name1");
  const name2 = document.getElementById("name2");
  const avatar1 = document.getElementById("avatar1");
  const avatar2 = document.getElementById("avatar2");

  const clean = (s) => (s || "").trim();
  const isNameValid = (s) => /^[a-zA-ZÀ-ÿ’' -]{2,}$/.test(s);

  function fullName(first, last) {
    return `${first} ${last}`;
  }

  function initials(first, last) {
    return (first[0] || "?") + (last[0] || "");
  }

  function updatePreview() {
    const f1 = inputs.p1First.value, l1 = inputs.p1Last.value;
    const f2 = inputs.p2First.value, l2 = inputs.p2Last.value;

    name1.textContent = (isNameValid(f1) && isNameValid(l1)) ? fullName(f1, l1) : "Joueur 1";
    name2.textContent = (isNameValid(f2) && isNameValid(l2)) ? fullName(f2, l2) : "Joueur 2";
    avatar1.textContent = initials(f1, l1);
    avatar2.textContent = initials(f2, l2);
  }

  form.addEventListener("input", updatePreview);

  form.addEventListener("submit", (e) => {
    e.preventDefault();

    const f1 = clean(inputs.p1First.value), l1 = clean(inputs.p1Last.value);
    const f2 = clean(inputs.p2First.value), l2 = clean(inputs.p2Last.value);

    if (!isNameValid(f1) || !isNameValid(l1)) {
      errors.textContent = "⚠️ Joueur 1 invalide.";
      return;
    }
    if (!isNameValid(f2) || !isNameValid(l2)) {
      errors.textContent = "⚠️ Joueur 2 invalide.";
      return;
    }
    if (fullName(f1, l1).toLowerCase() === fullName(f2, l2).toLowerCase()) {
      errors.textContent = "⚠️ Les deux joueurs doivent être différents.";
      return;
    }

    // OK
    errors.textContent = "";
    state.players[0] = { first: f1, last: l1 };
    state.players[1] = { first: f2, last: l2 };
    sum1.textContent = fullName(f1, l1);
    sum2.textContent = fullName(f2, l2);
    successBox.hidden = false;
    submitBtn.hidden = true;
    resetBtn.hidden = false;
    for (const el of Object.values(inputs)) el.disabled = true;
  });

  resetBtn.addEventListener("click", () => {
    successBox.hidden = true;
    submitBtn.hidden = false;
    resetBtn.hidden = true;
    for (const el of Object.values(inputs)) el.disabled = false;
  });

  updatePreview();
});
